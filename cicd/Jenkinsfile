pipeline {
  agent none
  environment {
    AGENT_IMAGE = 'shykin/alpine:d1a05482c9cd4403cfa693719c3c57a77113cfcb'
    APP_NAME = 'spring-petclinic'
    AWS_ACCOUNT_ID = "${AWS_ACCOUNT_ID_}"
    AWS_REGION = 'eu-north-1'
    IMAGE_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    AWS_CRED_ID='jenkins-aws'
  }
  options {
    disableConcurrentBuilds()
    preserveStashes()
  }
  parameters {
    string(name: 'AWS_CRED_ID', defaultValue: 'jenkins-aws')
    string(name: 'DOCKER_HOST_', defaultValue: 'tcp://172.31.18.232:2375')
    string(name: 'EKS_CLUSTER_NAME', defaultValue: 'shykin-eks-jlcJ3JXr')
    string(name: 'EKS_CLUSTER_REGION', defaultValue: 'eu-north-1')
  }
  stages {
    stage('Build App') {
      options {
        timeout(time: 600, unit: 'SECONDS')
      }
      when {
        allOf {
          anyOf {
            changeset "src/main/**"
            triggeredBy 'UserIdCause'
          }
          expression {
            env.BRANCH_NAME in ['main', 'test']
          }
        }
      }
      agent {
        dockerContainer {
          image "${AGENT_IMAGE}"
        }
      }
      steps {
        sh 'mvn -B package'
        stash includes: '**/target/*.jar', name: 'package'
        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
      }
      post {
        always {
          junit '**/target/surefire-reports/*.xml'
        }
      }
    }
    stage('Build Image') {
      options {
        timeout(time: 600, unit: 'SECONDS')
      }
      when {
        allOf {
          anyOf {
            changeset "src/main/**"
            triggeredBy 'UserIdCause'
          }
          expression {
            env.BRANCH_NAME in ['main', 'test']
          }
        }
      }
      agent {
        dockerContainer {
          image "${AGENT_IMAGE}"
        }
      }
      environment {
        DOCKER_HOST = "${DOCKER_HOST_}"
      }
      steps {
        withCredentials([usernamePassword(credentialsId: AWS_CRED_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          unstash 'package'
          sh '''
          cp target/*.jar app.jar
          cp cicd/Dockerfile .
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker buildx build -t $GIT_COMMIT .
          docker image tag $GIT_COMMIT $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT
          docker image push $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT
          docker manifest inspect $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT > manifest.json
          docker image rm $GIT_COMMIT $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT
          docker logout $IMAGE_REGISTRY
          '''
          archiveArtifacts artifacts: 'manifest.json', fingerprint: true
        }
      }
    }
    stage('Deploy') {
      options {
        timeout(time: 600, unit: 'SECONDS')
      }
      when {
        allOf {
          anyOf {
            changeset "src/main/**"
            triggeredBy 'UserIdCause'
          }
          expression {
            env.BRANCH_NAME in ['main', 'test']
          }
        }
      }
      agent {
        dockerContainer {
          image "${AGENT_IMAGE}"
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: AWS_CRED_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
          echo $EKS_CLUSTER_NAME
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $EKS_CLUSTER_REGION
          '''
        }
      }
    }
  }
}
