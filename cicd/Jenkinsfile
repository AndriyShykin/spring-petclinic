pipeline {
  agent none
  environment {
    AGENT_IMAGE = 'shykin/alpine:d1a05482c9cd4403cfa693719c3c57a77113cfcb'
    APP_NAME = 'spring-petclinic'
    AWS_ACCOUNT_ID = "${AWS_ACCOUNT_ID_}"
    AWS_REGION = 'eu-north-1'
    IMAGE_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    JENKINS_AWS_ROLE = 'arn:aws:iam::975049956464:role/JenkinsAssumeRole'
  }
  options {
    disableConcurrentBuilds()
    preserveStashes()
  }
  parameters {
    string(name: 'AWS_CRED_ID', defaultValue: 'jenkins-aws')
    string(name: 'DOCKER_HOST_', defaultValue: 'tcp://172.31.18.232:2375')
    string(name: 'EKS_CLUSTER_REGION', defaultValue: 'eu-north-1')
    string(name: 'EKS_CLUSTER_NAME', defaultValue: '')
  }
  stages {
    stage('Build App') {
      agent none
      options {
        timeout(time: 600, unit: 'SECONDS')
      }
      when {
        allOf {
          expression {
            env.BRANCH_NAME in ['main']
          }
          anyOf {
            changeset "src/main/**"
            triggeredBy 'UserIdCause'
          }
        }
      }
      stages {
        stage('nested'){
          agent {
            dockerContainer {
              image "${AGENT_IMAGE}"
            }
          }
          steps {
            sh 'mvn -B package'
            stash includes: '**/target/*.jar', name: 'package'
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
          }
          post {
            always {
              junit '**/target/surefire-reports/*.xml'
            }
          }
        }
      }
    }
    stage('Build Image') {
      agent none
      options {
        timeout(time: 600, unit: 'SECONDS')
      }
      when {
        allOf {
          expression {
            env.BRANCH_NAME in ['main']
          }
          anyOf {
            changeset "src/main/**"
            triggeredBy 'UserIdCause'
          }
        }
      }
      stages {
        stage('nested'){
          agent {
            dockerContainer {
              image "${AGENT_IMAGE}"
            }
          }
          environment {
            DOCKER_HOST = "${DOCKER_HOST_}"
          }
          steps {
            withCredentials([usernamePassword(credentialsId: AWS_CRED_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
              unstash 'package'
              sh '''
              cp target/*.jar app.jar
              cp cicd/Dockerfile .
              export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
              $(aws sts assume-role \
              --role-arn $JENKINS_AWS_ROLE \
              --role-session-name JenkinsBuildImage \
              --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
              --output text))
              aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
              docker buildx build -t $GIT_COMMIT .
              docker image tag $GIT_COMMIT $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT
              docker image push $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT
              docker manifest inspect $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT > manifest.json
              docker image rm $GIT_COMMIT $IMAGE_REGISTRY/$APP_NAME-$BRANCH_NAME:$GIT_COMMIT
              docker logout $IMAGE_REGISTRY
              '''
              archiveArtifacts artifacts: 'manifest.json', fingerprint: true
            }
          }
        }
      }
    }
    stage('Deploy') {
      agent none
      options {
        timeout(time: 600, unit: 'SECONDS')
      }
      when {
        allOf {
          expression {
            env.BRANCH_NAME in ['main', 'test']
          }
          anyOf {
            changeset "src/main/**"
            triggeredBy 'UserIdCause'
          }
        }
      }
      stages {
        stage('nested'){
          agent {
            dockerContainer {
              image "${AGENT_IMAGE}"
            }
          }
          steps {
            withCredentials([usernamePassword(credentialsId: AWS_CRED_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
              sh '''
              export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
              $(aws sts assume-role \
              --role-arn $JENKINS_AWS_ROLE \
              --role-session-name JenkinsDeploy \
              --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
              --output text))
              aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $EKS_CLUSTER_REGION
              helm upgrade --install --namespace petclinic-$BRANCH_NAME --create-namespace petclinic-$BRANCH_NAME helm/petclinic
              '''
            }
          }
        }
      }
    }
  }
}
