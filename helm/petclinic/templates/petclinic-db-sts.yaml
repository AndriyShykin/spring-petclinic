apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.applicationName }}-{{ .Values.branchName }}-db
spec:
  serviceName: {{ .Values.applicationName }}-{{ .Values.branchName }}-db
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.applicationName }}-{{ .Values.branchName }}-db
  template:
    metadata:
      labels:
        app: {{ .Values.applicationName }}-{{ .Values.branchName }}-db
    spec:
      automountServiceAccountToken: false
      containers:
        - envFrom:
            - configMapRef:
                name: {{ .Values.applicationName }}-{{ .Values.branchName }}
            - secretRef:
                name: {{ .Values.applicationName }}-{{ .Values.branchName }}
          image: {{ .Values.database.image }}:{{ .Values.database.imageTag }}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "while ! mysql -u root -p{{ .Values.secret.mysqlRootPassword }} < /etc/mysql/conf.d/10-init.sql; do sleep 4; done"]
          name: {{ .Values.applicationName }}-{{ .Values.branchName }}-db
          ports:
            - containerPort: {{ .Values.database.containerPort }}
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
              readOnly: false
            - name: {{ .Values.applicationName }}-{{ .Values.branchName }}-db-init-sql
              mountPath: /etc/mysql/conf.d/10-init.sql
              readOnly: true
              subPath: 10-init.sql
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: {{ .Values.applicationName }}-{{ .Values.branchName }}-db
        - configMap:
            name: {{ .Values.applicationName }}-{{ .Values.branchName }}-db-init-sql
          name: {{ .Values.applicationName }}-{{ .Values.branchName }}-db-init-sql
